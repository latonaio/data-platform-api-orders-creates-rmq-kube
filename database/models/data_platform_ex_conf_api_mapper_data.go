// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformExConfAPIMapperDatum is an object representing the database table.
type DataPlatformExConfAPIMapperDatum struct {
	ServiceLabel         string      `boil:"ServiceLabel" json:"ServiceLabel" toml:"ServiceLabel" yaml:"ServiceLabel"`
	APIType              string      `boil:"APIType" json:"APIType" toml:"APIType" yaml:"APIType"`
	APIName              string      `boil:"APIName" json:"APIName" toml:"APIName" yaml:"APIName"`
	Field                string      `boil:"Field" json:"Field" toml:"Field" yaml:"Field"`
	ExConfAPIServiceName null.String `boil:"ExConfAPIServiceName" json:"ExConfAPIServiceName,omitempty" toml:"ExConfAPIServiceName" yaml:"ExConfAPIServiceName,omitempty"`
	ExConfAPIName        null.String `boil:"ExConfAPIName" json:"ExConfAPIName,omitempty" toml:"ExConfAPIName" yaml:"ExConfAPIName,omitempty"`
	Tabletag             null.String `boil:"Tabletag" json:"Tabletag,omitempty" toml:"Tabletag" yaml:"Tabletag,omitempty"`
	TableConfirmed       null.String `boil:"TableConfirmed" json:"TableConfirmed,omitempty" toml:"TableConfirmed" yaml:"TableConfirmed,omitempty"`
	ExConfAPIType        null.String `boil:"ExConfAPIType" json:"ExConfAPIType,omitempty" toml:"ExConfAPIType" yaml:"ExConfAPIType,omitempty"`

	R *dataPlatformExConfAPIMapperDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformExConfAPIMapperDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformExConfAPIMapperDatumColumns = struct {
	ServiceLabel         string
	APIType              string
	APIName              string
	Field                string
	ExConfAPIServiceName string
	ExConfAPIName        string
	Tabletag             string
	TableConfirmed       string
	ExConfAPIType        string
}{
	ServiceLabel:         "ServiceLabel",
	APIType:              "APIType",
	APIName:              "APIName",
	Field:                "Field",
	ExConfAPIServiceName: "ExConfAPIServiceName",
	ExConfAPIName:        "ExConfAPIName",
	Tabletag:             "Tabletag",
	TableConfirmed:       "TableConfirmed",
	ExConfAPIType:        "ExConfAPIType",
}

var DataPlatformExConfAPIMapperDatumTableColumns = struct {
	ServiceLabel         string
	APIType              string
	APIName              string
	Field                string
	ExConfAPIServiceName string
	ExConfAPIName        string
	Tabletag             string
	TableConfirmed       string
	ExConfAPIType        string
}{
	ServiceLabel:         "data_platform_ex_conf_api_mapper_data.ServiceLabel",
	APIType:              "data_platform_ex_conf_api_mapper_data.APIType",
	APIName:              "data_platform_ex_conf_api_mapper_data.APIName",
	Field:                "data_platform_ex_conf_api_mapper_data.Field",
	ExConfAPIServiceName: "data_platform_ex_conf_api_mapper_data.ExConfAPIServiceName",
	ExConfAPIName:        "data_platform_ex_conf_api_mapper_data.ExConfAPIName",
	Tabletag:             "data_platform_ex_conf_api_mapper_data.Tabletag",
	TableConfirmed:       "data_platform_ex_conf_api_mapper_data.TableConfirmed",
	ExConfAPIType:        "data_platform_ex_conf_api_mapper_data.ExConfAPIType",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DataPlatformExConfAPIMapperDatumWhere = struct {
	ServiceLabel         whereHelperstring
	APIType              whereHelperstring
	APIName              whereHelperstring
	Field                whereHelperstring
	ExConfAPIServiceName whereHelpernull_String
	ExConfAPIName        whereHelpernull_String
	Tabletag             whereHelpernull_String
	TableConfirmed       whereHelpernull_String
	ExConfAPIType        whereHelpernull_String
}{
	ServiceLabel:         whereHelperstring{field: "`data_platform_ex_conf_api_mapper_data`.`ServiceLabel`"},
	APIType:              whereHelperstring{field: "`data_platform_ex_conf_api_mapper_data`.`APIType`"},
	APIName:              whereHelperstring{field: "`data_platform_ex_conf_api_mapper_data`.`APIName`"},
	Field:                whereHelperstring{field: "`data_platform_ex_conf_api_mapper_data`.`Field`"},
	ExConfAPIServiceName: whereHelpernull_String{field: "`data_platform_ex_conf_api_mapper_data`.`ExConfAPIServiceName`"},
	ExConfAPIName:        whereHelpernull_String{field: "`data_platform_ex_conf_api_mapper_data`.`ExConfAPIName`"},
	Tabletag:             whereHelpernull_String{field: "`data_platform_ex_conf_api_mapper_data`.`Tabletag`"},
	TableConfirmed:       whereHelpernull_String{field: "`data_platform_ex_conf_api_mapper_data`.`TableConfirmed`"},
	ExConfAPIType:        whereHelpernull_String{field: "`data_platform_ex_conf_api_mapper_data`.`ExConfAPIType`"},
}

// DataPlatformExConfAPIMapperDatumRels is where relationship names are stored.
var DataPlatformExConfAPIMapperDatumRels = struct {
}{}

// dataPlatformExConfAPIMapperDatumR is where relationships are stored.
type dataPlatformExConfAPIMapperDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformExConfAPIMapperDatumR) NewStruct() *dataPlatformExConfAPIMapperDatumR {
	return &dataPlatformExConfAPIMapperDatumR{}
}

// dataPlatformExConfAPIMapperDatumL is where Load methods for each relationship are stored.
type dataPlatformExConfAPIMapperDatumL struct{}

var (
	dataPlatformExConfAPIMapperDatumAllColumns            = []string{"ServiceLabel", "APIType", "APIName", "Field", "ExConfAPIServiceName", "ExConfAPIName", "Tabletag", "TableConfirmed", "ExConfAPIType"}
	dataPlatformExConfAPIMapperDatumColumnsWithoutDefault = []string{"ServiceLabel", "APIType", "APIName", "Field", "ExConfAPIServiceName", "ExConfAPIName", "Tabletag", "TableConfirmed", "ExConfAPIType"}
	dataPlatformExConfAPIMapperDatumColumnsWithDefault    = []string{}
	dataPlatformExConfAPIMapperDatumPrimaryKeyColumns     = []string{"ServiceLabel", "APIType", "APIName", "Field"}
	dataPlatformExConfAPIMapperDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformExConfAPIMapperDatumSlice is an alias for a slice of pointers to DataPlatformExConfAPIMapperDatum.
	// This should almost always be used instead of []DataPlatformExConfAPIMapperDatum.
	DataPlatformExConfAPIMapperDatumSlice []*DataPlatformExConfAPIMapperDatum
	// DataPlatformExConfAPIMapperDatumHook is the signature for custom DataPlatformExConfAPIMapperDatum hook methods
	DataPlatformExConfAPIMapperDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformExConfAPIMapperDatum) error

	dataPlatformExConfAPIMapperDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformExConfAPIMapperDatumType                 = reflect.TypeOf(&DataPlatformExConfAPIMapperDatum{})
	dataPlatformExConfAPIMapperDatumMapping              = queries.MakeStructMapping(dataPlatformExConfAPIMapperDatumType)
	dataPlatformExConfAPIMapperDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformExConfAPIMapperDatumType, dataPlatformExConfAPIMapperDatumMapping, dataPlatformExConfAPIMapperDatumPrimaryKeyColumns)
	dataPlatformExConfAPIMapperDatumInsertCacheMut       sync.RWMutex
	dataPlatformExConfAPIMapperDatumInsertCache          = make(map[string]insertCache)
	dataPlatformExConfAPIMapperDatumUpdateCacheMut       sync.RWMutex
	dataPlatformExConfAPIMapperDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformExConfAPIMapperDatumUpsertCacheMut       sync.RWMutex
	dataPlatformExConfAPIMapperDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformExConfAPIMapperDatumAfterSelectHooks []DataPlatformExConfAPIMapperDatumHook

var dataPlatformExConfAPIMapperDatumBeforeInsertHooks []DataPlatformExConfAPIMapperDatumHook
var dataPlatformExConfAPIMapperDatumAfterInsertHooks []DataPlatformExConfAPIMapperDatumHook

var dataPlatformExConfAPIMapperDatumBeforeUpdateHooks []DataPlatformExConfAPIMapperDatumHook
var dataPlatformExConfAPIMapperDatumAfterUpdateHooks []DataPlatformExConfAPIMapperDatumHook

var dataPlatformExConfAPIMapperDatumBeforeDeleteHooks []DataPlatformExConfAPIMapperDatumHook
var dataPlatformExConfAPIMapperDatumAfterDeleteHooks []DataPlatformExConfAPIMapperDatumHook

var dataPlatformExConfAPIMapperDatumBeforeUpsertHooks []DataPlatformExConfAPIMapperDatumHook
var dataPlatformExConfAPIMapperDatumAfterUpsertHooks []DataPlatformExConfAPIMapperDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformExConfAPIMapperDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformExConfAPIMapperDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformExConfAPIMapperDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformExConfAPIMapperDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformExConfAPIMapperDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformExConfAPIMapperDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformExConfAPIMapperDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformExConfAPIMapperDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformExConfAPIMapperDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformExConfAPIMapperDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformExConfAPIMapperDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformExConfAPIMapperDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformExConfAPIMapperDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformExConfAPIMapperDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformExConfAPIMapperDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformExConfAPIMapperDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformExConfAPIMapperDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformExConfAPIMapperDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformExConfAPIMapperDatumHook registers your hook function for all future operations.
func AddDataPlatformExConfAPIMapperDatumHook(hookPoint boil.HookPoint, dataPlatformExConfAPIMapperDatumHook DataPlatformExConfAPIMapperDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformExConfAPIMapperDatumAfterSelectHooks = append(dataPlatformExConfAPIMapperDatumAfterSelectHooks, dataPlatformExConfAPIMapperDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformExConfAPIMapperDatumBeforeInsertHooks = append(dataPlatformExConfAPIMapperDatumBeforeInsertHooks, dataPlatformExConfAPIMapperDatumHook)
	case boil.AfterInsertHook:
		dataPlatformExConfAPIMapperDatumAfterInsertHooks = append(dataPlatformExConfAPIMapperDatumAfterInsertHooks, dataPlatformExConfAPIMapperDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformExConfAPIMapperDatumBeforeUpdateHooks = append(dataPlatformExConfAPIMapperDatumBeforeUpdateHooks, dataPlatformExConfAPIMapperDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformExConfAPIMapperDatumAfterUpdateHooks = append(dataPlatformExConfAPIMapperDatumAfterUpdateHooks, dataPlatformExConfAPIMapperDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformExConfAPIMapperDatumBeforeDeleteHooks = append(dataPlatformExConfAPIMapperDatumBeforeDeleteHooks, dataPlatformExConfAPIMapperDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformExConfAPIMapperDatumAfterDeleteHooks = append(dataPlatformExConfAPIMapperDatumAfterDeleteHooks, dataPlatformExConfAPIMapperDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformExConfAPIMapperDatumBeforeUpsertHooks = append(dataPlatformExConfAPIMapperDatumBeforeUpsertHooks, dataPlatformExConfAPIMapperDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformExConfAPIMapperDatumAfterUpsertHooks = append(dataPlatformExConfAPIMapperDatumAfterUpsertHooks, dataPlatformExConfAPIMapperDatumHook)
	}
}

// One returns a single dataPlatformExConfAPIMapperDatum record from the query.
func (q dataPlatformExConfAPIMapperDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformExConfAPIMapperDatum, error) {
	o := &DataPlatformExConfAPIMapperDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_ex_conf_api_mapper_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformExConfAPIMapperDatum records from the query.
func (q dataPlatformExConfAPIMapperDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformExConfAPIMapperDatumSlice, error) {
	var o []*DataPlatformExConfAPIMapperDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformExConfAPIMapperDatum slice")
	}

	if len(dataPlatformExConfAPIMapperDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformExConfAPIMapperDatum records in the query.
func (q dataPlatformExConfAPIMapperDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_ex_conf_api_mapper_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformExConfAPIMapperDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_ex_conf_api_mapper_data exists")
	}

	return count > 0, nil
}

// DataPlatformExConfAPIMapperData retrieves all the records using an executor.
func DataPlatformExConfAPIMapperData(mods ...qm.QueryMod) dataPlatformExConfAPIMapperDatumQuery {
	mods = append(mods, qm.From("`data_platform_ex_conf_api_mapper_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_ex_conf_api_mapper_data`.*"})
	}

	return dataPlatformExConfAPIMapperDatumQuery{q}
}

// FindDataPlatformExConfAPIMapperDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformExConfAPIMapperDatum(ctx context.Context, exec boil.ContextExecutor, serviceLabel string, aPIType string, aPIName string, field string, selectCols ...string) (*DataPlatformExConfAPIMapperDatum, error) {
	dataPlatformExConfAPIMapperDatumObj := &DataPlatformExConfAPIMapperDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_ex_conf_api_mapper_data` where `ServiceLabel`=? AND `APIType`=? AND `APIName`=? AND `Field`=?", sel,
	)

	q := queries.Raw(query, serviceLabel, aPIType, aPIName, field)

	err := q.Bind(ctx, exec, dataPlatformExConfAPIMapperDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_ex_conf_api_mapper_data")
	}

	if err = dataPlatformExConfAPIMapperDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformExConfAPIMapperDatumObj, err
	}

	return dataPlatformExConfAPIMapperDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformExConfAPIMapperDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_ex_conf_api_mapper_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformExConfAPIMapperDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformExConfAPIMapperDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformExConfAPIMapperDatumInsertCache[key]
	dataPlatformExConfAPIMapperDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformExConfAPIMapperDatumAllColumns,
			dataPlatformExConfAPIMapperDatumColumnsWithDefault,
			dataPlatformExConfAPIMapperDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformExConfAPIMapperDatumType, dataPlatformExConfAPIMapperDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformExConfAPIMapperDatumType, dataPlatformExConfAPIMapperDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_ex_conf_api_mapper_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_ex_conf_api_mapper_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_ex_conf_api_mapper_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformExConfAPIMapperDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_ex_conf_api_mapper_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ServiceLabel,
		o.APIType,
		o.APIName,
		o.Field,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_ex_conf_api_mapper_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformExConfAPIMapperDatumInsertCacheMut.Lock()
		dataPlatformExConfAPIMapperDatumInsertCache[key] = cache
		dataPlatformExConfAPIMapperDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformExConfAPIMapperDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformExConfAPIMapperDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformExConfAPIMapperDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformExConfAPIMapperDatumUpdateCache[key]
	dataPlatformExConfAPIMapperDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformExConfAPIMapperDatumAllColumns,
			dataPlatformExConfAPIMapperDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_ex_conf_api_mapper_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_ex_conf_api_mapper_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformExConfAPIMapperDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformExConfAPIMapperDatumType, dataPlatformExConfAPIMapperDatumMapping, append(wl, dataPlatformExConfAPIMapperDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_ex_conf_api_mapper_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_ex_conf_api_mapper_data")
	}

	if !cached {
		dataPlatformExConfAPIMapperDatumUpdateCacheMut.Lock()
		dataPlatformExConfAPIMapperDatumUpdateCache[key] = cache
		dataPlatformExConfAPIMapperDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformExConfAPIMapperDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_ex_conf_api_mapper_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_ex_conf_api_mapper_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformExConfAPIMapperDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformExConfAPIMapperDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_ex_conf_api_mapper_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformExConfAPIMapperDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformExConfAPIMapperDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformExConfAPIMapperDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformExConfAPIMapperDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformExConfAPIMapperDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_ex_conf_api_mapper_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformExConfAPIMapperDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformExConfAPIMapperDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformExConfAPIMapperDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformExConfAPIMapperDatumUpsertCache[key]
	dataPlatformExConfAPIMapperDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformExConfAPIMapperDatumAllColumns,
			dataPlatformExConfAPIMapperDatumColumnsWithDefault,
			dataPlatformExConfAPIMapperDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformExConfAPIMapperDatumAllColumns,
			dataPlatformExConfAPIMapperDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_ex_conf_api_mapper_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_ex_conf_api_mapper_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_ex_conf_api_mapper_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformExConfAPIMapperDatumType, dataPlatformExConfAPIMapperDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformExConfAPIMapperDatumType, dataPlatformExConfAPIMapperDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_ex_conf_api_mapper_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformExConfAPIMapperDatumType, dataPlatformExConfAPIMapperDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_ex_conf_api_mapper_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_ex_conf_api_mapper_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformExConfAPIMapperDatumUpsertCacheMut.Lock()
		dataPlatformExConfAPIMapperDatumUpsertCache[key] = cache
		dataPlatformExConfAPIMapperDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformExConfAPIMapperDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformExConfAPIMapperDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformExConfAPIMapperDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformExConfAPIMapperDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_ex_conf_api_mapper_data` WHERE `ServiceLabel`=? AND `APIType`=? AND `APIName`=? AND `Field`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_ex_conf_api_mapper_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_ex_conf_api_mapper_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformExConfAPIMapperDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformExConfAPIMapperDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_ex_conf_api_mapper_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_ex_conf_api_mapper_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformExConfAPIMapperDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformExConfAPIMapperDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformExConfAPIMapperDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_ex_conf_api_mapper_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformExConfAPIMapperDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformExConfAPIMapperDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_ex_conf_api_mapper_data")
	}

	if len(dataPlatformExConfAPIMapperDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformExConfAPIMapperDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformExConfAPIMapperDatum(ctx, exec, o.ServiceLabel, o.APIType, o.APIName, o.Field)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformExConfAPIMapperDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformExConfAPIMapperDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformExConfAPIMapperDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_ex_conf_api_mapper_data`.* FROM `data_platform_ex_conf_api_mapper_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformExConfAPIMapperDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformExConfAPIMapperDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformExConfAPIMapperDatumExists checks if the DataPlatformExConfAPIMapperDatum row exists.
func DataPlatformExConfAPIMapperDatumExists(ctx context.Context, exec boil.ContextExecutor, serviceLabel string, aPIType string, aPIName string, field string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_ex_conf_api_mapper_data` where `ServiceLabel`=? AND `APIType`=? AND `APIName`=? AND `Field`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceLabel, aPIType, aPIName, field)
	}
	row := exec.QueryRowContext(ctx, sql, serviceLabel, aPIType, aPIName, field)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_ex_conf_api_mapper_data exists")
	}

	return exists, nil
}
